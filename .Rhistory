title = plot_traits[i])
}
}
}
gwas_mappings(Final_Processed_Mappings)
plot_df<-Final_Processed_Mappings
length(unique(plot_df$trait)) ==
1
plot_df %>%
dplyr::distinct(marker) %>%
ggplot2::ggplot(.) +
ggplot2::aes(x = POS/1e6, y = log10p) +
ggplot2::scale_color_manual(values = c("black","blue","red")) +
ggplot2::geom_rect(ggplot2::aes(xmin = startPOS/1e6,
xmax = endPOS/1e6,
ymin = 0,
ymax = Inf,
fill = "blue",
alpha=.1),
color = NA)+
ggplot2::geom_hline(ggplot2::aes(yintercept = BF),
color = "gray",
alpha = .75,
size = 1)+
ggplot2::geom_point( ggplot2::aes(color= factor(aboveBF)) ) +
ggplot2::facet_grid( . ~ CHROM, scales = "free_x" ) +
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = ggplot2::element_text(size=24, face="bold", color="black"),
axis.text.y = ggplot2::element_text(size=24, face="bold", color="black"),
axis.title.x = ggplot2::element_text(size=24, face="bold", color="black", vjust=-.3),
axis.title.y = ggplot2::element_text(size=24, face="bold", color="black"),
strip.text.x = ggplot2::element_text(size=24, face="bold", color="black"),
strip.text.y = ggplot2::element_text(size=16, face="bold", color="black"),
plot.title = ggplot2::element_text(size=24, face="bold", vjust = 1),
legend.position="none",
panel.background = ggplot2::element_rect( color="black",size=1.2),
strip.background = ggplot2::element_rect(color = "black", size = 1.2)) +
ggplot2::labs(x = "Genomic Position (Mb)",
y = expression(log[10](p)),
title = unique(plot_df$trait))
pheno <- spike(snps, c(80, 1020))
processed_phenotypes <- process_pheno(pheno)
mapping_df <- gwas_mappings(processed_phenotypes, cores = 4, only_sig = FALSE)
View(mapping_df)
mapping_df
phenotype_df <- processed_phenotypes
CI_size = 50
snp_grouping = 200
# format phenotypes
pheno <- phenotype_df[[2]]
row.names(pheno) <- phenotype_df[[1]]
pheno$trait <- phenotype_df[[1]]
Processed <- mapping_df %>%
dplyr::group_by( trait ) %>%
dplyr::mutate( BF = -log10(.05/n()) ) %>% #  add BF threshold
dplyr::group_by( trait ) %>%
dplyr::mutate( aboveBF = ifelse(log10p >= BF, 1, 0) ) %>% #  label SNPs as significant
dplyr::filter(sum(aboveBF) > 0) %>% # keep only significant mappings
dplyr::ungroup()
## Select SNPs above BF
snpsForVE <- Processed %>%
dplyr::filter( aboveBF == 1 ) %>%
dplyr::select( marker, trait )
snpsForVE$trait <- as.character(snpsForVE$trait)
## Trim raw data and snp set to contain phenotypes and snps from BF mappings
row.names(pheno) <- gsub("-", "\\.", row.names(pheno))
pheno$trait <- gsub("-", "\\.", pheno$trait)
# Trim phenotypes and join to significant snps identified in mapping
rawTr <- pheno[ row.names(pheno) %in% snpsForVE$trait,] %>%
tidyr::gather( strain, value, -trait ) %>% # make long format
dplyr::left_join( ., snpsForVE,
by = "trait" ) # join to significant SNPs from mapping dataframe
# make columns factored by dplyr into characters to minimize warnings
rawTr$marker <- as.character(rawTr$marker)
rawTr$strain <- as.character(rawTr$strain)
# Trim snps to only contain those that are significant from mappings
snp_df <- data.frame(snps)
gINFO <- snp_df %>%
dplyr::mutate( marker = paste(CHROM, POS, sep = "_")) %>%
dplyr::filter( marker %in% snpsForVE$marker ) %>%
tidyr::gather( strain, allele, -marker, -CHROM, -POS)
# make columns factored by dplyr into characters to minimize warnings
gINFO$marker <- as.character(gINFO$marker)
# combine genotype data, phenotype data, and significant snps from mappnings
gINFO <- data.frame(gINFO) %>%
dplyr::left_join( ., snpsForVE, by= "marker") %>% # join significant snps with genotypes
dplyr::left_join( rawTr, ., by=c( "trait", "strain", "marker") ) # join to phenotypes
# calculate variance explained using spearman correlation
cors <- gINFO %>%
# each significant snp contains genotype and phenotype information for all strains
# so group by both to calculate variance explained for each significant snp
dplyr::group_by( trait, marker ) %>%
# calculate correlation
dplyr::mutate( var.exp = cor(value, allele, use = "pairwise.complete.obs", method="spearman")^2 )
# bring it all together, that :
# # # genotypes
# # # phenotypes
# # # correlations
# # # # # # # # # # # FOR ALL SIGNIFICANT SNPS
CORmaps <- Processed %>%
dplyr::left_join( ., cors, by=c("trait","marker","CHROM","POS"), copy=TRUE )
processed_mapping_df <- Processed
correlation_df <- CORmaps
# # # Part 2
# # # IDENTIFY PEAKS
# PHENOTYPES THAT HAVE SIGNIFICANT MAPPINGS
phenotypes <- as.character(unique(processed_mapping_df$trait))
# INITIALIZE A LIST TO PUT INDIVIDUAL PHENOTYPE INTERVAL INFORMATION
intervals <- list()
# LOOP THROUGH ALL UNIQUE PHENOTYPES
for( i in 1:length(phenotypes) ){
print(paste(100*signif(i/length(phenotypes),3), "%",sep=""))
# PREP DATA FRAME FOR PEAK IDENTIFICATION
PeakDF <- processed_mapping_df %>%
dplyr::filter( trait == phenotypes[i] ) %>%
dplyr::group_by( CHROM, trait ) %>%
dplyr::mutate( index = 1:n() ) %>% # SNP INDEX
dplyr::mutate( peaks = cumsum(aboveBF) ) %>% # IDENTIFY PEAKS
dplyr::filter( aboveBF == 1 )%>% # KEEP SNPS ABOVE BONFERRONI
dplyr::group_by( CHROM, trait) %>%
dplyr::mutate( nBF = n() ) %>% # COUNT NUMBER OF SNPS ABOVE BONFERRONI PER PHENOTYPE PER CHROMOSOME
dplyr::group_by( CHROM, trait ) %>%
dplyr::arrange( CHROM, POS ) # ARRANGE DATA BY CHROMOSOME AND POSITION
# generate a SNP index for SNPs on each chromosome
SNPindex <- processed_mapping_df %>%
dplyr::filter( trait == phenotypes[i] ) %>%
dplyr::group_by( CHROM, trait ) %>%
dplyr::mutate( index = 1:n() )%>%
dplyr::distinct( CHROM, POS )%>%
dplyr::select( CHROM, POS, index )%>%
dplyr::filter( POS == min(POS) | POS == max(POS) )
# FILTER COMPLETE DATA SET TO JUST LOOK AT ONE PHENOTYPE AT A TIME
findPks <- PeakDF %>%
dplyr::filter( trait == phenotypes[i] ) %>%
dplyr::group_by( CHROM ) %>%
dplyr::arrange( CHROM, POS )
# IF ONLY ONE SNP PASSED SIGNIFICANCE THRESHOLD LABEL PEAK ID AS 1
if ( findPks$nBF == 1 & length(unique(findPks$CHROM) ) == 1 ){
findPks$pID <- 1
# PLUS / MINUS 50 SNPS FROM PEAK SNP DEFINES CONFIDENCE INTERVAL
findPks <- findPks %>%
dplyr::group_by( CHROM, pID, trait ) %>%
dplyr::mutate( start = min(index) - CI_size,
end = max(index) + CI_size )
for( k in 1:nrow(findPks) ){
tSNPs <- SNPindex %>%
dplyr::filter( CHROM == findPks$CHROM[k] )
if( findPks$start[k] < min(tSNPs$index) ){
findPks$start[k] <- min(tSNPs$index)
} else if( findPks$end[k] > max(tSNPs$index) ) {
findPks$end[k] <- max(tSNPs$index)
}
}
# APPEND TO LIST
intervals[[i]] <- findPks %>%
dplyr::ungroup()
}
else
{
# INITIALIZE PEAK ID COLUMN WITH 1'S :: GIVES YOU A STARTING POINT
findPks$pID <- 1
# LOOP THROUGH ROWS FOR EACH PHENOTYPE CORRESPONDING TO SNPS ABOVE BONFERRONI CORRECTION
# START AT ROW 2 BECAUSE THERE WILL ALWAYS BE AT LEAST 1 UNIQUE PEAK
for( j in 2:nrow(findPks) ){
# IF
# SNP INDEX IS WITHIN A CERTAIN RANGE (snp_grouping) OF SNP FROM PREVIOUS ROW
# AND
# ON THE SAME CHROMOSOME AS SNP FROM PREVIOUS ROW
# # # # CONSIDER THEM TO BE THE SAME PEAK
# IF THE ABOVE CONDITIONS ARE NOT MET
# ADD 1 TO THE PEAK ID (i.e. IDENTIFY AS A NEW PEAK)
findPks$pID[j] <- ifelse( abs(findPks$index[j] - findPks$index[j-1]) < snp_grouping &
findPks$CHROM[j] == findPks$CHROM[j-1],
findPks$pID[j-1],
findPks$pID[j-1]+1)
}
# PLUS / MINUS 50 SNPS FROM PEAK SNP DEFINES CONFIDENCE INTERVAL
findPks <- findPks %>%
dplyr::group_by( CHROM , pID, trait) %>%
dplyr::mutate(start = min(index) - CI_size,
end = max(index) + CI_size)
for( k in 1:nrow(findPks) ){
tSNPs <- SNPindex %>%
dplyr::filter( CHROM == findPks$CHROM[k] )
if( findPks$start[k] < min(tSNPs$index) ){
findPks$start[k] <- min(tSNPs$index)
} else if( findPks$end[k] > max(tSNPs$index) ) {
findPks$end[k] <- max(tSNPs$index)
}
}
}
# APPEND TO LIST
intervals[[i]] <- findPks %>%
dplyr::ungroup()
}
# BIND GENERATED LIST TOGETHER
intervalDF <- data.table::rbindlist(intervals)
peak_df <- intervalDF
peak_list <- intervals
# FILTER COMPLETE MAPPING SET TO ONLY CONTAIN INTERVAL INDICIES TO SAVE COMPUTATIONAL TIME BELOW
Pos_Index_Reference  <- processed_mapping_df %>%
dplyr::group_by( CHROM, trait ) %>%
dplyr::mutate( index = 1:n() ) %>%
dplyr::mutate( peaks = cumsum(aboveBF) ) %>%
dplyr::select( trait, CHROM, POS, index ) %>%
dplyr::filter( index %in% c(unique(peak_df$start), unique(peak_df$end)) ) %>%
dplyr::ungroup()
Pos_Index_Reference$trait <- as.character(Pos_Index_Reference$trait)
# INITIALIZE LIST TO APPEND INTERVAL POSITION DATA FOR EACH PHENOTYPE
interval_positions <- list()
# LOOP THROUGH UNIQUE PHENOTYPES TO LINK CONFIDENCE INTERVALS IN INDEX FORM TO POSITION FORM
for( i in 1:length(peak_list)){
print(paste(100*signif(i/length(peak_list),3), "%",sep=""))
peak_list[[i]]$trait <- as.character(peak_list[[i]]$trait)
peak_list[[i]] <- dplyr::distinct(peak_list[[i]], pID)
# FILTER TO LOOK AT ONE PHENOTYPE AT A TIME
# FILTER APPROPRIATE INTERVAL INDICIES AND CHROMOSOMES FOR THAT PHENOTYPE
trait_i <- unique(peak_list[[i]]$trait)
index_i <- c(peak_list[[i]]$start, peak_list[[i]]$end)
CHROM_i <- peak_list[[i]]$CHROM
PKpos <- data.frame(Pos_Index_Reference) %>%
dplyr::filter(trait == trait_i &
index %in% index_i &
CHROM %in%  CHROM_i) %>%
# JOIN POSITION INFORMATION TO PHENOTYPE PEAK INFORMATION
dplyr::left_join( ., peak_list[[i]], by= c("trait","CHROM") )%>%
# YOU WILL GET UNWANTED SNP INDEX INFORMATION IN SITUATIONS WHERE YOU HAVE MULTIPLE PEAKS
# ELIMINATE THOSE BY MATCHING START AND END FROM INDEX DATAFRAME TO INDEX FROM POSITION DATAFRAME
# FIRST FLAG
dplyr::mutate(issues = ifelse(start == index.x | end == index.x, 1, 0))%>%
# THEN REMOVE
dplyr::filter(issues != 0)%>%
# SELECT COLUMNS OF INTEREST
dplyr::select(trait, CHROM, POS.x, POS.y, pID, log10p, index.x, index.y, start, end)%>%
# GROUP BY PEAK IDS ORIGINALLY PRESENT IN INDEX DATAFRAME
dplyr::group_by(CHROM, pID) %>%
# GENERATE COLUMNS TO WITH INTERVAL POSITIONS AND PEAK POSITIONS
dplyr::mutate(startPOS = min(POS.x),
peakPOS = POS.y,
endPOS = max(POS.x)) %>%
# ELIMINATE REDUNDANT DATA
dplyr::distinct(trait, CHROM, pID, peakPOS) %>%
# SELECT COLUMNS OF NTEREST
dplyr::select(trait, CHROM, POS = POS.y, startPOS, peakPOS, endPOS, peak_id = pID)
# APPEND TO LIST
interval_positions[[i]] <- PKpos
}
# BIND EVERYTHING
interval_pos_df <- data.frame(data.table::rbindlist(interval_positions)) %>%
# CALCULATE INTERVAL SIZE
dplyr::mutate(interval_size = endPOS - startPOS)
# JOIN INTERVAL POSITIONS TO DATA FRAME CONTAINING CORRELATION INFORMATION AND PHENOTYPE INFORMATION
Final_Processed_Mappings <- dplyr::left_join( correlation_df, interval_pos_df,
by = c("trait", "CHROM", "POS"),
copy = TRUE )
plot_df <- Final_Processed_Mappings
plot_df %>%
dplyr::distinct(marker) %>%
ggplot2::ggplot(.) +
ggplot2::aes(x = POS/1e6, y = log10p) +
ggplot2::scale_color_manual(values = c("black","blue","red")) +
ggplot2::geom_rect(ggplot2::aes(xmin = startPOS/1e6,
xmax = endPOS/1e6,
ymin = 0,
ymax = Inf,
fill = "blue",
alpha=.1),
color = NA)+
ggplot2::geom_hline(ggplot2::aes(yintercept = BF),
color = "gray",
alpha = .75,
size = 1)+
ggplot2::geom_point( ggplot2::aes(color= factor(aboveBF)) ) +
ggplot2::facet_grid( . ~ CHROM, scales = "free_x" ) +
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = ggplot2::element_text(size=24, face="bold", color="black"),
axis.text.y = ggplot2::element_text(size=24, face="bold", color="black"),
axis.title.x = ggplot2::element_text(size=24, face="bold", color="black", vjust=-.3),
axis.title.y = ggplot2::element_text(size=24, face="bold", color="black"),
strip.text.x = ggplot2::element_text(size=24, face="bold", color="black"),
strip.text.y = ggplot2::element_text(size=16, face="bold", color="black"),
plot.title = ggplot2::element_text(size=24, face="bold", vjust = 1),
legend.position="none",
panel.background = ggplot2::element_rect( color="black",size=1.2),
strip.background = ggplot2::element_rect(color = "black", size = 1.2)) +
ggplot2::labs(x = "Genomic Position (Mb)",
y = expression(log[10](p)),
title = unique(plot_df$trait))
devtools::install_github("AndersenLab/cegwas")
pheno <- spike(snps, c(80, 1020))
processed_phenotypes <- process_pheno(pheno)
mapping_df <- gwas_mappings(processed_phenotypes, cores = 4, only_sig = FALSE)
processed_mapping_df <- process_mappings(mapping_df, phenotype_df = processed_phenotypes, CI_size = 50, snp_grouping = 200)
manplot(processed_mapping_df)
View(mapping_df)
View(processed_mapping_df)
phenotype_df <- processed_phenotypes
CI_size = 50
snp_grouping = 200
pheno <- phenotype_df[[2]]
row.names(pheno) <- phenotype_df[[1]]
pheno$trait <- phenotype_df[[1]]
Processed <- mapping_df %>%
dplyr::group_by( trait ) %>%
dplyr::mutate( BF = -log10(.05/n()) ) %>% #  add BF threshold
dplyr::group_by( trait ) %>%
dplyr::mutate( aboveBF = ifelse(log10p >= BF, 1, 0) ) %>% #  label SNPs as significant
dplyr::filter(sum(aboveBF) > 0) %>% # keep only significant mappings
dplyr::ungroup()
## Select SNPs above BF
snpsForVE <- Processed %>%
dplyr::filter( aboveBF == 1 ) %>%
dplyr::select( marker, trait )
snpsForVE$trait <- as.character(snpsForVE$trait)
## Trim raw data and snp set to contain phenotypes and snps from BF mappings
row.names(pheno) <- gsub("-", "\\.", row.names(pheno))
pheno$trait <- gsub("-", "\\.", pheno$trait)
# Trim phenotypes and join to significant snps identified in mapping
rawTr <- pheno[ row.names(pheno) %in% snpsForVE$trait,] %>%
tidyr::gather( strain, value, -trait ) %>% # make long format
dplyr::left_join( ., snpsForVE,
by = "trait" ) # join to significant SNPs from mapping dataframe
# make columns factored by dplyr into characters to minimize warnings
rawTr$marker <- as.character(rawTr$marker)
rawTr$strain <- as.character(rawTr$strain)
# Trim snps to only contain those that are significant from mappings
snp_df <- data.frame(snps)
gINFO <- snp_df %>%
dplyr::mutate( marker = paste(CHROM, POS, sep = "_")) %>%
dplyr::filter( marker %in% snpsForVE$marker ) %>%
tidyr::gather( strain, allele, -marker, -CHROM, -POS)
# make columns factored by dplyr into characters to minimize warnings
gINFO$marker <- as.character(gINFO$marker)
# combine genotype data, phenotype data, and significant snps from mappnings
gINFO <- data.frame(gINFO) %>%
dplyr::left_join( ., snpsForVE, by= "marker") %>% # join significant snps with genotypes
dplyr::left_join( rawTr, ., by=c( "trait", "strain", "marker") ) # join to phenotypes
# calculate variance explained using spearman correlation
cors <- gINFO %>%
# each significant snp contains genotype and phenotype information for all strains
# so group by both to calculate variance explained for each significant snp
dplyr::group_by( trait, marker ) %>%
# calculate correlation
dplyr::mutate( var.exp = cor(value, allele, use = "pairwise.complete.obs", method="spearman")^2 )
# bring it all together, that :
# # # genotypes
# # # phenotypes
# # # correlations
# # # # # # # # # # # FOR ALL SIGNIFICANT SNPS
CORmaps <- Processed %>%
dplyr::left_join( ., cors, by=c("trait","marker","CHROM","POS"), copy=TRUE )
processed_mapping_df <- Processed
correlation_df <- CORmaps
# # # Part 2
# # # IDENTIFY PEAKS
# PHENOTYPES THAT HAVE SIGNIFICANT MAPPINGS
phenotypes <- as.character(unique(processed_mapping_df$trait))
# INITIALIZE A LIST TO PUT INDIVIDUAL PHENOTYPE INTERVAL INFORMATION
intervals <- list()
# LOOP THROUGH ALL UNIQUE PHENOTYPES
for( i in 1:length(phenotypes) ){
print(paste(100*signif(i/length(phenotypes),3), "%",sep=""))
# PREP DATA FRAME FOR PEAK IDENTIFICATION
PeakDF <- processed_mapping_df %>%
dplyr::filter( trait == phenotypes[i] ) %>%
dplyr::group_by( CHROM, trait ) %>%
dplyr::mutate( index = 1:n() ) %>% # SNP INDEX
dplyr::mutate( peaks = cumsum(aboveBF) ) %>% # IDENTIFY PEAKS
dplyr::filter( aboveBF == 1 )%>% # KEEP SNPS ABOVE BONFERRONI
dplyr::group_by( CHROM, trait) %>%
dplyr::mutate( nBF = n() ) %>% # COUNT NUMBER OF SNPS ABOVE BONFERRONI PER PHENOTYPE PER CHROMOSOME
dplyr::group_by( CHROM, trait ) %>%
dplyr::arrange( CHROM, POS ) # ARRANGE DATA BY CHROMOSOME AND POSITION
# generate a SNP index for SNPs on each chromosome
SNPindex <- processed_mapping_df %>%
dplyr::filter( trait == phenotypes[i] ) %>%
dplyr::group_by( CHROM, trait ) %>%
dplyr::mutate( index = 1:n() )%>%
dplyr::distinct( CHROM, POS )%>%
dplyr::select( CHROM, POS, index )%>%
dplyr::filter( POS == min(POS) | POS == max(POS) )
# FILTER COMPLETE DATA SET TO JUST LOOK AT ONE PHENOTYPE AT A TIME
findPks <- PeakDF %>%
dplyr::filter( trait == phenotypes[i] ) %>%
dplyr::group_by( CHROM ) %>%
dplyr::arrange( CHROM, POS )
# IF ONLY ONE SNP PASSED SIGNIFICANCE THRESHOLD LABEL PEAK ID AS 1
if ( findPks$nBF == 1 & length(unique(findPks$CHROM) ) == 1 ){
findPks$pID <- 1
# PLUS / MINUS 50 SNPS FROM PEAK SNP DEFINES CONFIDENCE INTERVAL
findPks <- findPks %>%
dplyr::group_by( CHROM, pID, trait ) %>%
dplyr::mutate( start = min(index) - CI_size,
end = max(index) + CI_size )
for( k in 1:nrow(findPks) ){
tSNPs <- SNPindex %>%
dplyr::filter( CHROM == findPks$CHROM[k] )
if( findPks$start[k] < min(tSNPs$index) ){
findPks$start[k] <- min(tSNPs$index)
} else if( findPks$end[k] > max(tSNPs$index) ) {
findPks$end[k] <- max(tSNPs$index)
}
}
# APPEND TO LIST
intervals[[i]] <- findPks %>%
dplyr::ungroup()
}
else
{
# INITIALIZE PEAK ID COLUMN WITH 1'S :: GIVES YOU A STARTING POINT
findPks$pID <- 1
# LOOP THROUGH ROWS FOR EACH PHENOTYPE CORRESPONDING TO SNPS ABOVE BONFERRONI CORRECTION
# START AT ROW 2 BECAUSE THERE WILL ALWAYS BE AT LEAST 1 UNIQUE PEAK
for( j in 2:nrow(findPks) ){
# IF
# SNP INDEX IS WITHIN A CERTAIN RANGE (snp_grouping) OF SNP FROM PREVIOUS ROW
# AND
# ON THE SAME CHROMOSOME AS SNP FROM PREVIOUS ROW
# # # # CONSIDER THEM TO BE THE SAME PEAK
# IF THE ABOVE CONDITIONS ARE NOT MET
# ADD 1 TO THE PEAK ID (i.e. IDENTIFY AS A NEW PEAK)
findPks$pID[j] <- ifelse( abs(findPks$index[j] - findPks$index[j-1]) < snp_grouping &
findPks$CHROM[j] == findPks$CHROM[j-1],
findPks$pID[j-1],
findPks$pID[j-1]+1)
}
# PLUS / MINUS 50 SNPS FROM PEAK SNP DEFINES CONFIDENCE INTERVAL
findPks <- findPks %>%
dplyr::group_by( CHROM , pID, trait) %>%
dplyr::mutate(start = min(index) - CI_size,
end = max(index) + CI_size)
for( k in 1:nrow(findPks) ){
tSNPs <- SNPindex %>%
dplyr::filter( CHROM == findPks$CHROM[k] )
if( findPks$start[k] < min(tSNPs$index) ){
findPks$start[k] <- min(tSNPs$index)
} else if( findPks$end[k] > max(tSNPs$index) ) {
findPks$end[k] <- max(tSNPs$index)
}
}
}
# APPEND TO LIST
intervals[[i]] <- findPks %>%
dplyr::ungroup()
}
# BIND GENERATED LIST TOGETHER
intervalDF <- data.table::rbindlist(intervals)
peak_df <- intervalDF
peak_list <- intervals
# FILTER COMPLETE MAPPING SET TO ONLY CONTAIN INTERVAL INDICIES TO SAVE COMPUTATIONAL TIME BELOW
Pos_Index_Reference  <- processed_mapping_df %>%
dplyr::group_by( CHROM, trait ) %>%
dplyr::mutate( index = 1:n() ) %>%
dplyr::mutate( peaks = cumsum(aboveBF) ) %>%
dplyr::select( trait, CHROM, POS, index ) %>%
dplyr::filter( index %in% c(unique(peak_df$start), unique(peak_df$end)) ) %>%
dplyr::ungroup()
Pos_Index_Reference$trait <- as.character(Pos_Index_Reference$trait)
# INITIALIZE LIST TO APPEND INTERVAL POSITION DATA FOR EACH PHENOTYPE
interval_positions <- list()
View(findPks)
print(paste(100*signif(i/length(peak_list),3), "%",sep=""))
peak_list[[i]]$trait <- as.character(peak_list[[i]]$trait)
peak_list[[i]] <- dplyr::distinct(peak_list[[i]], pID)
# FILTER TO LOOK AT ONE PHENOTYPE AT A TIME
# FILTER APPROPRIATE INTERVAL INDICIES AND CHROMOSOMES FOR THAT PHENOTYPE
trait_i <- unique(peak_list[[i]]$trait)
index_i <- c(peak_list[[i]]$start, peak_list[[i]]$end)
CHROM_i <- peak_list[[i]]$CHROM
PKpos <- data.frame(Pos_Index_Reference) %>%
dplyr::filter(trait == trait_i &
index %in% index_i &
CHROM %in%  CHROM_i) %>%
# JOIN POSITION INFORMATION TO PHENOTYPE PEAK INFORMATION
dplyr::left_join( ., peak_list[[i]], by= c("trait","CHROM") )%>%
# YOU WILL GET UNWANTED SNP INDEX INFORMATION IN SITUATIONS WHERE YOU HAVE MULTIPLE PEAKS
# ELIMINATE THOSE BY MATCHING START AND END FROM INDEX DATAFRAME TO INDEX FROM POSITION DATAFRAME
# FIRST FLAG
dplyr::mutate(issues = ifelse(start == index.y | end == index.y, 1, 0))%>%
# THEN REMOVE
dplyr::filter(issues != 0)%>%
# SELECT COLUMNS OF INTEREST
dplyr::select(trait, CHROM, POS.x, POS.y, pID, log10p, index.x, index.y, start, end)%>%
# GROUP BY PEAK IDS ORIGINALLY PRESENT IN INDEX DATAFRAME
dplyr::group_by(CHROM, pID) %>%
# GENERATE COLUMNS TO WITH INTERVAL POSITIONS AND PEAK POSITIONS
dplyr::mutate(startPOS = min(POS.x),
peakPOS = POS.y,
endPOS = max(POS.x)) %>%
# ELIMINATE REDUNDANT DATA
dplyr::distinct(trait, CHROM, pID, peakPOS) %>%
# SELECT COLUMNS OF NTEREST
dplyr::select(trait, CHROM, POS = POS.y, startPOS, peakPOS, endPOS, peak_id = pID)
# APPEND TO LIST
interval_positions[[i]] <- PKpos
View( peak_list[[i]])
PKpos <- data.frame(Pos_Index_Reference) %>%
dplyr::filter(trait == trait_i &
index %in% index_i &
CHROM %in%  CHROM_i) %>%
# JOIN POSITION INFORMATION TO PHENOTYPE PEAK INFORMATION
dplyr::left_join( ., peak_list[[i]], by= c("trait","CHROM") )%>%
# YOU WILL GET UNWANTED SNP INDEX INFORMATION IN SITUATIONS WHERE YOU HAVE MULTIPLE PEAKS
# ELIMINATE THOSE BY MATCHING START AND END FROM INDEX DATAFRAME TO INDEX FROM POSITION DATAFRAME
# FIRST FLAG
dplyr::mutate(issues = ifelse(start == index.y | end == index.y, 1, 0))
View(PKpos)
pheno <- spike(snps, c(80, 1020))
processed_phenotypes <- process_pheno(pheno)
mapping_df <- gwas_mappings(processed_phenotypes, cores = 4, only_sig = FALSE)
processed_mapping_df <- process_mappings(mapping_df, phenotype_df = processed_phenotypes, CI_size = 50, snp_grouping = 200)
manplot(processed_mapping_df)
